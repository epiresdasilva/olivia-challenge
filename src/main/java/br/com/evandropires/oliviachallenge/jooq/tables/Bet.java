/*
 * This file is generated by jOOQ.
 */
package br.com.evandropires.oliviachallenge.jooq.tables;


import br.com.evandropires.oliviachallenge.jooq.Indexes;
import br.com.evandropires.oliviachallenge.jooq.Keys;
import br.com.evandropires.oliviachallenge.jooq.Public;
import br.com.evandropires.oliviachallenge.jooq.tables.records.BetRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bet extends TableImpl<BetRecord> {

    private static final long serialVersionUID = 407973522;

    /**
     * The reference instance of <code>public.bet</code>
     */
    public static final Bet BET = new Bet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BetRecord> getRecordType() {
        return BetRecord.class;
    }

    /**
     * The column <code>public.bet.id</code>.
     */
    public final TableField<BetRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('bet_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.bet.name</code>.
     */
    public final TableField<BetRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.bet.email</code>.
     */
    public final TableField<BetRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.bet.height</code>.
     */
    public final TableField<BetRecord, BigDecimal> HEIGHT = createField("height", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.bet.weight</code>.
     */
    public final TableField<BetRecord, BigDecimal> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.bet.born</code>.
     */
    public final TableField<BetRecord, Timestamp> BORN = createField("born", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.bet.hairy</code>.
     */
    public final TableField<BetRecord, Boolean> HAIRY = createField("hairy", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.bet</code> table reference
     */
    public Bet() {
        this(DSL.name("bet"), null);
    }

    /**
     * Create an aliased <code>public.bet</code> table reference
     */
    public Bet(String alias) {
        this(DSL.name(alias), BET);
    }

    /**
     * Create an aliased <code>public.bet</code> table reference
     */
    public Bet(Name alias) {
        this(alias, BET);
    }

    private Bet(Name alias, Table<BetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bet(Name alias, Table<BetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Bet(Table<O> child, ForeignKey<O, BetRecord> key) {
        super(child, key, BET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BET_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BetRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BetRecord> getPrimaryKey() {
        return Keys.BET_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BetRecord>> getKeys() {
        return Arrays.<UniqueKey<BetRecord>>asList(Keys.BET_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bet as(String alias) {
        return new Bet(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bet as(Name alias) {
        return new Bet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bet rename(String name) {
        return new Bet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bet rename(Name name) {
        return new Bet(name, null);
    }
}
